import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from aiogram.filters import Command

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TOKEN")

# –ö–æ–º–∞–Ω–¥—ã, –∫—Ç–æ –º–æ–∂–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å
GATE_RESPONDERS = ["MadiyarYntykbay", "Tinbrawl", "limbachof"]
OPEN_RESPONDERS = ["KhanWarden", "teemudzhinn", "Garmaevvlad", "danayergali"]

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ö–æ–º–∞–Ω–¥–∞: –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–æ—Ç
@dp.message(Command("gate"))
async def request_gate(message: Message):
    requester = message.from_user.username or message.from_user.full_name
    gate_location = "—Å –ê–π—Ç–∏–µ–≤–∞"
    tagged_users = " ".join([f"@{u}" for u in GATE_RESPONDERS])
    text = f"üîê –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–æ—Ç {gate_location} –æ—Ç @{requester}.

{tagged_users}

"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–µ –û—Ç–∫—Ä—ã—Ç–æ", callback_data="gate_opened")]
    ])
    await message.answer(text, reply_markup=keyboard)

# –ö–æ–º–∞–Ω–¥–∞: –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞
@dp.message(Command("open"))
async def request_barrier(message: Message):
    requester = message.from_user.username or message.from_user.full_name
    tagged_users = " ".join([f"@{u}" for u in OPEN_RESPONDERS])
    text = f"üõ° –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞ –æ—Ç @{requester}.

{tagged_users}

"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ùå –ù–µ –û—Ç–∫—Ä—ã—Ç–æ", callback_data="barrier_opened")]
    ])
    await message.answer(text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç–æ" ‚Äî –≤–æ—Ä–æ—Ç–∞
@dp.callback_query(lambda c: c.data == "gate_opened")
async def handle_gate_opened(callback: types.CallbackQuery):
    opener = callback.from_user.username or callback.from_user.full_name
    if opener not in GATE_RESPONDERS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –≤–æ—Ä–æ—Ç–∞", show_alert=True)
        return
    new_text = callback.message.text.replace("‚ùå –ü–æ–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ", f"‚úÖ –û—Ç–∫—Ä—ã–ª @{opener}")
    await callback.message.edit_text(new_text, reply_markup=None)
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫—Ä—ã—Ç–æ" ‚Äî —à–ª–∞–≥–±–∞—É–º
@dp.callback_query(lambda c: c.data == "barrier_opened")
async def handle_barrier_opened(callback: types.CallbackQuery):
    opener = callback.from_user.username or callback.from_user.full_name
    if opener not in OPEN_RESPONDERS:
        await callback.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —à–ª–∞–≥–±–∞—É–º", show_alert=True)
        return
    new_text = callback.message.text.replace("‚ùå –ü–æ–∫–∞ –Ω–µ –æ—Ç–∫—Ä—ã—Ç–æ", f"‚úÖ –û—Ç–∫—Ä—ã–ª @{opener}")
    await callback.message.edit_text(new_text, reply_markup=None)
    await callback.answer("–ì–æ—Ç–æ–≤–æ!")

# –ö–æ–º–∞–Ω–¥—ã
async def set_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="open", description="üõ° –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ —à–ª–∞–≥–±–∞—É–º–∞"),
        BotCommand(command="gate", description="üö™ –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–æ—Ä–æ—Ç —Å –ê–π—Ç–∏–µ–≤–∞"),
    ]
    await bot.set_my_commands(commands)

# –ó–∞–ø—É—Å–∫
async def main():
    await set_commands(bot)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
